# Default variables/parameters for all jobs
variables:
  data_folder: /usr/src/app/data
  cmake_option_GENERATOR: -GNinja
  cmake_option_build_type: -DCMAKE_BUILD_TYPE=Release
  cmake_option_shared: -DBUILD_SHARED_LIBS=ON
  SB_deps_install_path: "${CI_PROJECT_DIR}/../${CI_PROJECT_NAME}_build/build_SB/install"
  GIT_SUBMODULE_STRATEGY: recursive
  GIT_SUBMODULE_DEPTH: 20

stages:
  - superbuild
  - slam_lib
  - ros_wrapping_build
  - ros_test

# Windows specific configuration
.windows_runner_config:
  before_script:
    # To use the Microsoft C++ Toolset from the command line, some environment variables need to be set.
    # To help with this, Microsoft provides the vcvarsall.bat script that sets different environment vars.
    # (see https://docs.microsoft.com/en-us/cpp/build/building-on-the-command-line?view=vs-2019)
    # However, the script is made for the command shell and the job run in a powershell.
    # A powershell can run a command shell script by using the `cmd` executable, but this implies
    # that environment variables are only set in the child cmd.exe instance. The environment variables need to
    # be updated in the powershell too. This is why the function Invoke-CmdScript is needed as it invokes
    # the script and updates the powershell environment.
    # This is taken from https://stackoverflow.com/a/41399983
    - | # pipe allows to use multiline command, see https://gitlab.com/gitlab-org/gitlab-runner/issues/166
      function Invoke-CmdScript {
        param(
          [String] $scriptName
        )
        $cmdLine = """$scriptName"" $args & set"
        & $Env:SystemRoot\system32\cmd.exe /c $cmdLine |
          Select-String '^([^=]*)=(.*)$' |
          ForEach-Object {
            $varName = $_.Matches[0].Groups[1].Value
            $varValue = $_.Matches[0].Groups[2].Value
            Set-Item Env:$varName $varValue
        }
      }
    - Invoke-CmdScript "${vcvarsall_script_location}/vcvarsall.bat" $architecture
  variables:
    # Paraview only supports MSVC 2019 and Ninja generator for now
    vcvarsall_script_location: 'C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Auxiliary/Build'
    architecture: x86_amd64

# ------------------------------------------------------------------------------
#   Build superbuild
# ------------------------------------------------------------------------------

# Clean superbuild
clean_superbuild:
  stage: superbuild
  tags: [superbuild]
  needs: []
  variables:
    build_dir: "${CI_PROJECT_DIR}/../${CI_PROJECT_NAME}_build/build_SB"
  rules:
    # Can be launched only from the web interface
    - if: $CI_PIPELINE_SOURCE == "web"
      when: manual
  script:
    - cmake -E remove_directory $build_dir

# Build superbuild
.build_superbuild:
  stage: superbuild
  tags: [superbuild]
  variables:
    build_dir: "${CI_PROJECT_DIR}/../${CI_PROJECT_NAME}_build/build_SB"
  rules:
    # Can be launched only from the web interface
    - if: $CI_PIPELINE_SOURCE == "web"
      when: manual
  script:
    - cmake -E make_directory $build_dir
    - cd $build_dir
    - echo "cmake ${CI_PROJECT_DIR}/slam-superbuild
      $cmake_option_GENERATOR
      $cmake_option_build_type
      -DCMAKE_INSTALL_PREFIX=$SB_deps_install_path
      -DBUILD_SLAM_SHARED_LIBS=OFF"
    - cmake "${CI_PROJECT_DIR}/slam-superbuild"
      $cmake_option_GENERATOR
      $cmake_option_build_type
      -DCMAKE_INSTALL_PREFIX="$SB_deps_install_path"
      -DBUILD_SLAM_SHARED_LIBS=OFF
    - cmake --build . -j 4

# Build superbuild on Windows
# This job allows to store the dependencies
# for next CI run on windows runners
windows_build_superbuild:
  tags: [windows]
  extends:
  - .windows_runner_config
  - .build_superbuild

# Build superbuild on Linux
# This job allows to store the dependencies
# for next CI run on linux runners
linux_build_superbuild:
  tags: [linux]
  extends:
    - .build_superbuild

# ------------------------------------------------------------------------------
#   Build core LidarSlam lib
# ------------------------------------------------------------------------------

.slam_lib:
  stage: slam_lib
  needs: []
  tags: [superbuild]
  variables:
    build_dir: "${CI_PROJECT_DIR}/../${CI_PROJECT_NAME}_build/build_slam_lib"
    slam_cmake_option_Eigen_INCLUDE_DIR: "-DEigen_INCLUDE_DIR=${SB_deps_install_path}/include"
    slam_cmake_option_Eigen_DIR: "-DEigen3_DIR=${SB_deps_install_path}/share/eigen3/cmake"
    slam_cmake_option_glog_DIR: "-Dglog_DIR=${SB_deps_install_path}/lib/cmake/glog"
    slam_cmake_option_Ceres_DIR: "-DCeres_DIR=${SB_deps_install_path}/lib/cmake/Ceres"
    slam_cmake_option_nanoflann_DIR: "-Dnanoflann_DIR=${SB_deps_install_path}/share/nanoflann/cmake"
    slam_cmake_option_BOOST_ROOT: "-DBOOST_ROOT=${SB_deps_install_path}/"
    slam_cmake_option_Boost_STATIC: "-DBoost_USE_STATIC_LIBS=OFF"
    slam_cmake_option_g2o_DIR: "-Dg2o_DIR=${SB_deps_install_path}/lib/cmake/g2o"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - if: $CI_COMMIT_BRANCH == "master"
      when: always
  script:
    - cmake -E remove_directory $build_dir
    - cmake -E make_directory $build_dir
    - cd $build_dir
    - echo "cmake $CI_PROJECT_DIR
      $cmake_option_GENERATOR
      $cmake_option_build_type
      $cmake_option_shared
      $slam_cmake_option_Eigen_INCLUDE_DIR
      $slam_cmake_option_Eigen_DIR
      $slam_cmake_option_glog_DIR
      $slam_cmake_option_Ceres_DIR
      $slam_cmake_option_nanoflann_DIR
      $slam_cmake_option_BOOST_ROOT
      $slam_cmake_option_Boost_STATIC
      $slam_cmake_option_PCL_DIR
      $slam_cmake_option_g2o_DIR"
    - cmake $CI_PROJECT_DIR
      $cmake_option_GENERATOR
      $cmake_option_build_type
      $cmake_option_shared
      $slam_cmake_option_Eigen_INCLUDE_DIR
      $slam_cmake_option_Eigen_DIR
      $slam_cmake_option_glog_DIR
      $slam_cmake_option_Ceres_DIR
      $slam_cmake_option_nanoflann_DIR
      $slam_cmake_option_BOOST_ROOT
      $slam_cmake_option_Boost_STATIC
      $slam_cmake_option_PCL_DIR
      $slam_cmake_option_g2o_DIR
    - cmake --build $build_dir -j 4

# Build core LidarSlam lib on Linux
linux_slam_lib:
  tags: [linux, superbuild]
  extends:
    - .slam_lib
  variables:
    slam_cmake_option_PCL_DIR: "-DPCL_DIR=${SB_deps_install_path}/share/pcl-1.13"

# Build core LidarSlam lib on Windows
windows_slam_lib:
  tags: [windows]
  extends:
  - .windows_runner_config
  - .slam_lib
  variables:
    slam_cmake_option_PCL_DIR: "-DPCL_DIR=${SB_deps_install_path}/cmake"

# ------------------------------------------------------------------------------
#   Build ROS wrapping (on docker)
# ------------------------------------------------------------------------------

# Build ROS wrapping on linux
linux_ros_wrapping_build:
  tags: [linux, ros]
  stage: ros_wrapping_build
  needs: []
  image: gitlab.kitware.com:4567/keu-computervision/slam:ros1_noetic
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - if: $CI_COMMIT_BRANCH == "master"
      when: always
    - if: $CI_PIPELINE_SOURCE == "web"
      when: always
  artifacts:
      paths:
        - catkin_ws
      expire_in: "60 days"
  script:
    # Create a hidden catkin workspace folder beside sources
    # This is used to move all files from the current directory
    - cmake -E make_directory .catkin_ws/src/slam
    # Move sources to workspace
    - mv * .catkin_ws/src/slam
    # Convert to not hidden folder to be able to cache it for next jobs
    - mv .catkin_ws catkin_ws
    # Compile
    - cd catkin_ws
    - source /opt/ros/noetic/setup.bash
    - catkin_make
      $cmake_option_build_type
      -j 4

# ------------------------------------------------------------------------------
#   Perform ROS tests (on docker)
# ------------------------------------------------------------------------------

# Create a reference for any test from master branch
.ros_make_reference:
  stage: ros_test
  tags: [linux, ros]
  needs: [linux_ros_wrapping_build]
  dependencies: [linux_ros_wrapping_build]
  image: gitlab.kitware.com:4567/keu-computervision/slam:ros1_noetic
  variables:
    GIT_STRATEGY: none
    PATH_REFERENCE_LOG: "test_log/${test_name}/reference"
  artifacts:
    paths:
    - "catkin_ws/$PATH_REFERENCE_LOG"
    expire_in: "60 days"
  rules:
    # Allow to manually create a reference for master from the web interface
    - if: $CI_PIPELINE_SOURCE == "web" && $CI_COMMIT_BRANCH == "master"
      when: manual
    - if: $CI_COMMIT_BRANCH == "master"
      when: always
  script:
    - cd catkin_ws
    - echo "Creating reference log files for $test_name for next lib improvements"
    - cmake -E make_directory "$PATH_REFERENCE_LOG"
    - source devel/setup.bash

    - ROS1_COMMAND="roslaunch lidar_slam_test slam.launch
      test_data:=${data_folder}/${test_name}/${test_name}.bag
      outdoor:=$outdoor
      vlp16:=$vlp16
      wait_init:=$wait_init
      res_path:=${PWD}/${PATH_REFERENCE_LOG}"

    - echo "$ROS1_COMMAND"
    - eval $ROS1_COMMAND 2>&1 | tee /tmp/test_log.txt
    # Checks whether the ROS1_COMMAND has worked properly
    - test ${PIPESTATUS[0]} -eq 0
    - grep "comparison ignored" /tmp/test_log.txt


# Perform test
.ros_test:
  stage: ros_test
  tags: [linux, ros]
  needs: [linux_ros_wrapping_build]
  dependencies: [linux_ros_wrapping_build]
  image: gitlab.kitware.com:4567/keu-computervision/slam:ros1_noetic
  variables:
    GIT_STRATEGY: none
    PATH_REFERENCE_LOG: "test_log/${test_name}/reference"
    PATH_RESULT_LOG: "test_log/${test_name}/result"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
  artifacts:
    paths:
    - "catkin_ws/test_log/${test_name}"
    expire_in: "60 days"
  script:
    # Search the id of the latest pipeline from master
    - PIPELINE_ID=$(curl --location "https://gitlab.kitware.com/api/v4/projects/4640/pipelines/latest?ref=master" |
      jq -r ".id")
    # Check that the variable is set
    - ([[ -n "$PIPELINE_ID" ]])

    # Search the id of the ref_name job in the latest pipeline from master
    - JOB_ID=$(curl "https://gitlab.kitware.com/api/v4/projects/4640/pipelines/${PIPELINE_ID}/jobs" |
      jq -r ".[] | select(.name == \"$ref_name\") | .id")
    # Check that the variable is set
    - ([[ -n "$JOB_ID" ]])

    # Download the artifact for the searched job
    - echo "Downloading artifact from the job ${JOB_ID} of the pipeline ${PIPELINE_ID}"
    - curl "https://gitlab.kitware.com/api/v4/projects/4640/jobs/${JOB_ID}/artifacts" --output artifacts_reference.zip
    - unzip artifacts_reference.zip

    - cd catkin_ws

    # Launch test
    - cmake -E make_directory "$PATH_RESULT_LOG"
    - source devel/setup.bash

    - ROS1_COMMAND="roslaunch lidar_slam_test slam.launch
      test_data:=${data_folder}/${test_name}/${test_name}.bag
      outdoor:=$outdoor
      vlp16:=$vlp16
      wait_init:=$wait_init
      ref_path:=${PWD}/${PATH_REFERENCE_LOG}
      res_path:=${PWD}/${PATH_RESULT_LOG}"

    - echo "$ROS1_COMMAND"
    - eval $ROS1_COMMAND 2>&1 | tee /tmp/test_log.txt
    # Checks whether the ROS1_COMMAND has worked properly
    - test ${PIPESTATUS[0]} -eq 0
    - grep "Test successfully passed" /tmp/test_log.txt


# Create a reference for test1 from master branch
ros_make_reference1:
  extends: .ros_make_reference
  variables:
    test_name: "test1"
    outdoor: "true"
    vlp16: "false"
    wait_init: "2" # To have time to init the process

# Create a reference for test2 from master branch
ros_make_reference2:
  extends: .ros_make_reference
  variables:
    test_name: "test2"
    outdoor: "false"
    vlp16: "true"
    wait_init: "4" # To have time to init the process

# Perform test 1
ros_test1:
  extends: .ros_test
  variables:
    test_name: "test1"
    ref_name: "ros_make_reference1" # job name to find the corresponding artifact
    outdoor: "true"
    vlp16: "false"
    wait_init: "2" # To have time to load the reference files

# Perform test 2
ros_test2:
  extends: .ros_test
  variables:
    test_name: "test2"
    ref_name: "ros_make_reference2" # job name to find the corresponding artifact
    outdoor: "false"
    vlp16: "true"
    wait_init: "4" # To have time to load the reference files